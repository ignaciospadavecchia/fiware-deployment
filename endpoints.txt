
# ============================================================================ 
# ENDPOINTS PARA CONFIGURACIÓN Y PRUEBA DE SISTEMA DE PARKING CON FIWARE
# ============================================================================

# · · ·

# ============================================================================
# 1. Registrar un grupo de servicios (NP del IoT JSON)
# ============================================================================

# El agente IoT JSON se registra como perteneciente a un Servicio y un Service Path (Tenant). 
# Informa su API key, indica quién es su Context Broker y qué tipo de entidad es y qué tipo de recurso.

curl -iX POST \
  'http://localhost:4041/iot/services' \
  -H 'Content-Type: application/json' \
  -H 'fiware-service: pamplona' \
  -H 'fiware-servicepath: /parkings' \
  -d '{
  "services": [
    {
      "apikey": "api-key-empresa-parking-1",
      "cbroker": "http://orion:1026",
      "entity_type": "ParkingSpot",
      "resource": "/iot/json"
    }
  ]
}'

# ============================================================================
# 2. Registrar un dispositivo (plaza de aparcamiento)
# ============================================================================

# El agente IoT JSON registra un dispositivo con Device Id, un Nombre de entidad (según formato urn:ngsi-ld:{ Tipo de entidad }:{ Servicio }:{ Service-Path }: { Id del Dispositivo }), Tipo de Entidad, Protocolo y Transporte, Zona Horaria, Atributos y Atributos Estáticos.

curl -iX POST \
  'http://localhost:4041/iot/devices' \
  -H 'Content-Type: application/json' \
  -H 'fiware-service: pamplona' \
  -H 'fiware-servicepath: /parkings' \
  -d '{
  "devices": [
    {
      "device_id": "parking-spot-001",
      "entity_name": "urn:ngsi-ld:ParkingSpot:pamplona:parkings:ParkingSpot001",
      "entity_type": "ParkingSpot",
      "protocol": "JSON",
      "transport": "HTTP",
      "timezone": "Europe/Madrid",
      "attributes": [
        {
          "object_id": "status",
          "name": "status",
          "type": "Text"
        },
        {
          "object_id": "category",
          "name": "category",
          "type": "array"
        },
        {
          "object_id": "width",
          "name": "width",
          "type": "Number"
        },
        {
          "object_id": "length",
          "name": "length",
          "type": "Number"
        }
      ],
      "static_attributes": [
        {
          "name": "name",
          "type": "Text",
          "value": "Plaza 001"
        },
        {
          "name": "location",
          "type": "geo:point",
          "value": "42.819831, -1.643384"
        },
        {
          "name": "refparkingsite",
          "type": "Relationship",
          "value": "urn:ngsi-ld:parkingsite:pamplona:parkings"
        }
      ]
    }
  ]
}'

# ============================================================================
# 3. Crear una suscripción para persistir datos en PostgreSQL
# ============================================================================

# Indica al Context Broker que debe notificar a Cygnus los cambios en las entidades ParkingSpot relacionados a este tenant. Creará en MongoDB una tabla "orion-pamplona", es decir una asociación entre Context Broker/fiware-service.

curl -iX POST \
  'http://localhost:1026/v2/subscriptions' \
  -H 'Content-Type: application/json' \
  -H 'fiware-service: pamplona' \
  -H 'fiware-servicepath: /parkings' \
  -d '{
  "description": "Notificar a Cygnus los cambios en plazas de aparcamiento",
  "subject": {
    "entities": [
      {
        "idPattern": "urn:ngsi-ld:ParkingSpot:pamplona:parkings:.*",
        "type": "ParkingSpot"
      }
    ],
    "condition": {
      "attrs": []
    }
  },
  "notification": {
    "http": {
      "url": "http://cygnus:5055/notify"
    },
    "attrs": [],
    "attrsFormat": "normalized"
  },
  "throttling": 5
}'

# ============================================================================
# 4. Enviar datos para actualizar el estado de la plaza de aparcamiento
# ============================================================================

# Como es una actualización irá al SOUTH_PORT del Agente JSON con el api key de la empresa y el device id de la entidad que se actualiza.

curl -iX POST \
  'http://localhost:7896/iot/json?k=api-key-empresa-parking-1&i=parking-spot-001' \
  -H 'Content-Type: application/json' \
  -H 'fiware-service: pamplona' \
  -H 'fiware-servicepath: /parkings' \
  -d '{
  "status": "occupied",
  "category": ["onStreet", "forDisabled"],
  "width": 2.6,
  "length": 5.0
}'

# ============================================================================
# 5. Consultar el estado actual de la plaza de aparcamiento
# ============================================================================

# El cliente consulta al Context Broker
# Primero será util listar todas las entidades para ver id especifico.

curl -X GET \
  'http://localhost:1026/v2/entities' \
  -H 'fiware-service: pamplona' \
  -H 'fiware-servicepath: /parkings'

# Luego utilizar el id de este modo:

curl -X GET \
  'http://localhost:1026/v2/entities/ParkingSpot:parking-spot-001' \
  -H 'fiware-service: pamplona' \
  -H 'fiware-servicepath: /parkings' \

# También se pueden usar query parameters para filtrar por tipo e id:

 curl -X GET \
     'http://localhost:1026/v2/entities?type=ParkingSpot' \
     -H 'fiware-service: pamplona' \
     -H 'fiware-servicepath: /parkings'

 curl -X GET \
     'http://localhost:1026/v2/entities?type=ParkingSpot&id=parking-spot-001' \
     -H 'fiware-service: pamplona' \
     -H 'fiware-servicepath: /parkings'

# ============================================================================
# 6. Verificar que los datos se han almacenado en PostgreSQL
# ============================================================================

# Conectar a PostgreSQL y ejecutar:

# SELECT * FROM pamplona_empresaparking_01_ParkingSpot;

curl -X GET \
  'http://localhost:1026/v2/entities' \
  -H 'fiware-service: pamplona' \
  -H 'fiware-servicepath: /'