
# ============================================================================ 
# PASO A PASO · CONFIGURACIÓN Y PRUEBA DE SISTEMA DE PARKING CON FIWARE
# ============================================================================

# ============================================================================
# 1. Registrar un grupo de servicios
# ============================================================================

# El agente IoT JSON se registra ante el Context Broker como perteneciente a un Servicio/Subservicio (service-path, vertical, tenant). 
# Informa su API key, sabe quién es su Context Broker y qué tipo de entidad es y en qué ruta tiene que registrar el recurso (/iot/json dentro del Context Broker).

curl -iX POST \
  'http://localhost:4041/iot/services' \
  -H 'Content-Type: application/json' \
  -H 'fiware-service: pamplona' \
  -H 'fiware-servicepath: /parkings' \
  -d '{
  "services": [
    {
      "apikey": "api_key_empresa_parking_1",
      "cbroker": "http://orion:1026",
      "entity_type": "ParkingSpot",
      "resource": "/iot/json"
    }
  ]
}'

# ============================================================================
# 2. Registrar un dispositivo (plaza de aparcamiento)
# ============================================================================

# El agente IoT JSON registra un dispositivo con Device Id, un Nombre de entidad (según formato urn:ngsi-ld:{ Tipo de entidad }:{ Servicio }:{ Service-Path }: { Id del Dispositivo }), Tipo de Entidad, Protocolo y Transporte, Zona Horaria, Atributos y Atributos Estáticos.

curl -iX POST \
  'http://localhost:4041/iot/devices' \
  -H 'Content-Type: application/json' \
  -H 'fiware-service: pamplona' \
  -H 'fiware-servicepath: /parkings' \
  -d '{
  "devices": [
    {
      "device_id": "parking-spot-001",
      "entity_name": "urn:ngsi-ld:ParkingSpot:pamplona:parkings:ParkingSpot001",
      "entity_type": "ParkingSpot",
      "protocol": "JSON",
      "transport": "HTTP",
      "timezone": "Europe/Madrid",
      "attributes": [
        {
          "object_id": "status",
          "name": "status",
          "type": "Text"
        },
        {
          "object_id": "category",
          "name": "category",
          "type": "array"
        },
        {
          "object_id": "width",
          "name": "width",
          "type": "Number"
        },
        {
          "object_id": "length",
          "name": "length",
          "type": "Number"
        }
      ],
      "static_attributes": [
        {
          "name": "name",
          "type": "Text",
          "value": "Plaza 001"
        },
        {
          "name": "location",
          "type": "geo:point",
          "value": "42.819831, -1.643384"
        },
        {
          "name": "refparkingsite",
          "type": "Relationship",
          "value": "urn:ngsi-ld:parkingsite:pamplona:parkings"
        }
      ]
    }
  ]
}'

# ============================================================================
# 3. Crea el schema y la tabla en PostgreSQL para poder insertar data. 
# ============================================================================

# El esquema en este caso será "pamplona" y la tabla "parkings_parkingspot_parking_spot_001_parkingspot"

# Ejecutar este script en un cliente PostgreSQL como DBeaver. Nota: El nombre de la tabla (subservicio) debe ir con guiones bajos.

-- Create the schema if it doesn't exist
CREATE SCHEMA IF NOT EXISTS pamplona;

-- Create the table for parking spot data
CREATE TABLE pamplona.parkings_parkingspot_parking_spot_001_parkingspot (
    recvTime TIMESTAMP,
    fiwareServicePath TEXT,
    entityId TEXT,
    entityType TEXT,
    length FLOAT,
    length_md TEXT,
    width FLOAT,
    width_md TEXT,
    category TEXT,
    category_md TEXT,
    TimeInstant TIMESTAMP,
    TimeInstant_md TEXT,
    status TEXT,
    status_md TEXT
);