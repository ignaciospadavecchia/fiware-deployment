# ============================================================================
# FIWARE DOCKER COMPOSE
# ============================================================================
version: "3.8"

services:
  # ----------------------------------------
  # COMPONENTES CORE
  # ----------------------------------------
  
  # Context Broker - Gestiona la información de contexto
  orion:
    image: fiware/orion:${ORION_VERSION:-3.10.1}
    container_name: fiware-orion
    hostname: orion
    ports:
      - "${ORION_PORT:-1026}:1026"
    depends_on:
      - mongo
    command: -dbhost mongo -logLevel INFO
    healthcheck:
      test: curl --fail -s http://localhost:1026/version || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - fiware

  # Base de datos para Orion
  mongo:
    image: mongo:${MONGO_VERSION}
    container_name: fiware-mongo
    hostname: ${MONGO_HOST}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - type: volume 
        source: mongo_data
        target: ${MONGO_DATA_PATH}
      - type: volume
        source: mongo_config
        target: ${MONGO_CONFIG_PATH}
    healthcheck: 
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - fiware

  # ----------------------------------------
  # AGENTES IOT
  # ----------------------------------------
  
  # IoT Agent para JSON
  iot-agent-json:
    image: fiware/iotagent-json:${IOTA_VERSION}
    container_name: fiware-iot-agent-json
    hostname: ${IOTA_JSON_HOST}
    depends_on:
      - mongo
    environment:
      # Configuración de Context Broker
      - "IOTA_CB_HOST=${ORION_HOST}"
      - "IOTA_CB_PORT=${ORION_PORT}"
      - "IOTA_CB_NGSI_VERSION=v2"

      # Configuración de puertos y endpoints
      - "IOTA_NORTH_PORT=${IOTA_NORTH_PORT}"
      - "IOTA_HTTP_PORT=${IOTA_SOUTH_PORT}"
      - "IOTA_PROVIDER_URL=http://${IOTA_JSON_HOST}:${IOTA_NORTH_PORT}"
      - "IOTA_DEFAULT_RESOURCE=/iot/json"

      # Configuración de MongoDB
      - "IOTA_REGISTRY_TYPE=mongodb"
      - "IOTA_MONGO_HOST=${MONGO_HOST}"
      - "IOTA_MONGO_PORT=${MONGO_PORT}"
      - "IOTA_MONGO_DB=${IOTA_MONGO_DB}"

      # Configuración general
      - "IOTA_LOG_LEVEL=${IOTA_LOG_LEVEL}"
      - "IOTA_TIMESTAMP=true"
      - "IOTA_AUTOCAST=true"
    ports:
      - "${IOTA_NORTH_PORT}:4041"
      - "${IOTA_SOUTH_PORT}:7896"
    restart: unless-stopped
    networks:
      - fiware

  # IoT Agent para Ultralight
  iot-agent-ul:
    image: fiware/iotagent-ul:${IOTA_VERSION}
    container_name: fiware-iot-agent-ul
    hostname: ${IOTA_UL_HOST}
    depends_on:
      - mongo
    ports:
      - "${IOTA_UL_NORTH_PORT}:4061"
      - "${IOTA_UL_SOUTH_PORT}:7897"
    environment:
      # Configuración de Context Broker
      - "IOTA_CB_HOST=${ORION_HOST}"
      - "IOTA_CB_PORT=${ORION_PORT}"
      - "IOTA_CB_NGSI_VERSION=v2"

      # Configuración de puertos y endpoints
      - "IOTA_NORTH_PORT=${IOTA_UL_NORTH_PORT}"
      - "IOTA_HTTP_PORT=${IOTA_UL_SOUTH_PORT}"
      - "IOTA_PROVIDER_URL=http://${IOTA_UL_HOST}:${IOTA_UL_NORTH_PORT}"
      - "IOTA_DEFAULT_RESOURCE=/iot/ul"

      # Configuración de MongoDB
      - "IOTA_REGISTRY_TYPE=mongodb"
      - "IOTA_MONGO_HOST=${MONGO_HOST}"
      - "IOTA_MONGO_PORT=${MONGO_PORT}"
      - "IOTA_MONGO_DB=${IOTA_MONGO_DB}"

      # Configuración general
      - "IOTA_LOG_LEVEL=${IOTA_LOG_LEVEL}"
      - "IOTA_TIMESTAMP=true"
      - "IOTA_AUTOCAST=true"
    restart: unless-stopped
    networks:
      - fiware

  # ----------------------------------------
  # COMPONENTES DE PERSISTENCIA HISTÓRICA
  # ----------------------------------------
  
  # Cygnus - Conector para persistencia histórica
  cygnus:
    image: fiware/cygnus-ngsi:${CYGNUS_VERSION:-2.18.0}
    container_name: fiware-cygnus
    hostname: cygnus
    depends_on:
      - postgres-db
      - mongo
      - mysql
    ports:
      - "5050:5050"
      - "5051:5051"
      - "5055:5055"
      - "5080:5080"
    environment:
      CYGNUS_LOG_LEVEL: INFO
      CYGNUS_SERVICE_PORT: 5055
      
      # PostgreSQL config
      CYGNUS_POSTGRESQL_HOST: postgres-db
      CYGNUS_POSTGRESQL_PORT: 5433
      CYGNUS_POSTGRESQL_DATABASE: postgres
      CYGNUS_POSTGRESQL_USER: postgres
      CYGNUS_POSTGRESQL_PASS: "${POSTGRES_PASSWORD:-password}"
      CYGNUS_POSTGRESQL_ENABLE: true
      CYGNUS_POSTGRESQL_SERVICE: orion
      
      # MySQL config
      CYGNUS_MYSQL_HOST: mysql
      CYGNUS_MYSQL_PORT: 3306
      CYGNUS_MYSQL_DB: mysql
      CYGNUS_MYSQL_USER: "${MYSQL_USER:-fiware-mysql-user}"
      CYGNUS_MYSQL_PASS: "${MYSQL_PASSWORD:-password}"
    restart: unless-stopped
    networks:
      - fiware

  # PostgreSQL - Base de datos para históricos
  postgres-db:
    image: postgres:${POSTGRES_VERSION:-14-alpine}
    container_name: fiware-postgres
    hostname: postgres-db
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-password}"
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_DB: "${POSTGRES_DB:-postgres}"
    volumes:
      - postgres_data:/var/lib/postgresql/data 
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - fiware


  postgis:
    image: postgis/postgis
    hostname: postgis
    container_name: fiware-postgis
    environment:
      # If you need to create multiple database you can add coma separated databases eg gis,data
      - "POSTGRES_DB=${POSTGRES_DB}"
      - "POSTGRES_USER=${POSTGRES_USER}"
      - "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}"
      - "ALLOW_IP_RANGE=0.0.0.0/0"
      # Add extensions you need to be enabled by default in the DB. Default are the five specified below
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
      - RUN_AS_ROOT=true
    ports:
      - "5434:5433"
    restart: on-failure
    volumes:
      - postgis-data:/var/lib/postgresql
      - dbbackups:/backups
    networks:
      - fiware

  # MySQL - Base de datos alternativa para históricos
  mysql:
    image: mysql:${MYSQL_VERSION:-8.0}
    container_name: fiware-mysql
    hostname: mysql
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD:-root-password}"
      MYSQL_DATABASE: "${MYSQL_DATABASE:-mysql}"
      MYSQL_USER: "${MYSQL_USER:-fiware-mysql-user}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD:-password}"
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - fiware

  # STH-Comet - Componente para series temporales históricas
  sth-comet:
    image: telefonicaiot/fiware-sth-comet:2.8.0
    container_name: fiware-sth-comet
    hostname: ${STH_HOST}
    depends_on:
      - mongo
    ports:
      - "${STH_PORT}:8666"
    environment:
      - "STH_HOST=0.0.0.0"
      - "STH_PORT=${STH_PORT}"
      - "DB_PREFIX=${STH_DB_PREFIX}"
      - "DB_URI=${MONGO_HOST}:${MONGO_PORT}"
      - "LOGOPS_LEVEL=${STH_LOG_LEVEL}"
    restart: unless-stopped
    networks:
      - fiware

  nifi:
    image: apache/nifi:latest
    container_name: fiware-nifi
    ports:
      - "8080:8080"
      - "8443:8443"
    environment:
      - NIFI_WEB_HTTP_PORT=8080
      - NIFI_WEB_HTTP_HOST= 0.0.0.0
    volumes:
      - ./data/:/data
      - ./driver:/driver
      - ./content_repository:/opt/nifi/nifi-current/content_repository
      - ./database_repository:/opt/nifi/nifi-current/database_repository
      - ./extensions:/opt/nifi/nifi-current/extensions
      - ./flowfile_repopsitory:/opt/nifi/nifi-current/flowfile_respository
      - ./provenance_repository:/opt/nifi/nifi-current/provenance_repository
    networks:
      - fiware

# ============================================================================
# VOLÚMENES PERSISTENTES
# ============================================================================

volumes:
  # Volumen para configuración de MongoDB
  mongo_config:
    name: fiware_mongo_config
  postgres_data:
    name: fiware_postgres_data
  mysql_data:
    name: fiware_mysql_data
  mongo_data:
    name: fiware_mongo_data
  postgis-data:
    name: fiware_postgis_data
  dbbackups:
    name: fiware_dbbackups
# ============================================================================
# REDES
# ============================================================================

networks:
  fiware:
    driver: bridge
    name: fiware_network
