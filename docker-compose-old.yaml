version: "3.8"

# ============================================================================
# SERVICIOS DE LA PLATAFORMA FIWARE
# ============================================================================

services:
  # ----------------------------------------
  # COMPONENTES CORE
  # ----------------------------------------
  
  # Context Broker - Gestiona la información de contexto
  orion:
    image: fiware/orion:${ORION_VERSION}
    container_name: fiware-orion
    hostname: orion
    ports:
      - "${ORION_PORT}:1026"
    depends_on:
      - mongo
    command: -dbhost mongo -logLevel INFO
    healthcheck:
      test: curl --fail -s http://localhost:1026/version || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - fiware

  # Base de datos para Orion
  mongo:
    image: mongo:${MONGO_VERSION}
    container_name: fiware-mongo
    hostname: mongo
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - type: bind
        source: ${MONGO_DATA_PATH}
        target: /data/db
      - type: volume
        source: mongo_config
        target: /data/configdb
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - fiware

  # ----------------------------------------
  # COMPONENTES DE PERSISTENCIA HISTÓRICA
  # ----------------------------------------
  
  # Cygnus - Conector para persistencia histórica
  cygnus:
    image: fiware/cygnus-ngsi:${CYGNUS_VERSION}
    container_name: fiware-cygnus
    hostname: cygnus
    depends_on:
      - postgres-db
      - mongo
      - mysql
    ports:
      - "${CYGNUS_API_PORT}:5050"
      - "${CYGNUS_ADMIN_PORT}:5080"
    environment:
      # Configuración general
      - "CYGNUS_LOG_LEVEL=${CYGNUS_LOG_LEVEL}"
      - "CYGNUS_SERVICE_PORT=5055"
      
      # Configuración de PostgreSQL
      - "CYGNUS_POSTGRESQL_ENABLE=true"
      - "CYGNUS_POSTGRESQL_HOST=postgres-db"
      - "CYGNUS_POSTGRESQL_PORT=5432"
      - "CYGNUS_POSTGRESQL_DATABASE=${POSTGRES_DB}"
      - "CYGNUS_POSTGRESQL_USER=${POSTGRES_USER}"
      - "CYGNUS_POSTGRESQL_PASS=${POSTGRES_PASSWORD}"
      - "CYGNUS_POSTGRESQL_SERVICE=orion"
      - "CYGNUS_POSTGRESQL_DATA_MODEL=dm-by-service-path"
      - "CYGNUS_POSTGRESQL_ATTR_PERSISTENCE=row"

      # Configuración de MongoDB
      - "CYGNUS_MONGO_HOSTS=mongo:27017"
      - "CYGNUS_MONGO_DB=${MONGO_DB_NAME}"
      - "CYGNUS_MONGO_SERVICE_PORT=5051"
      
      # Configuración de MySQL
      - "CYGNUS_MYSQL_HOST=mysql"
      - "CYGNUS_MYSQL_PORT=3306"
      - "CYGNUS_MYSQL_DB=${MYSQL_DATABASE}"
      - "CYGNUS_MYSQL_USER=${MYSQL_USER}"
      - "CYGNUS_MYSQL_PASS=${MYSQL_PASSWORD}"
      - "CYGNUS_MYSQL_DATA_MODEL=dm-by-entity"
      - "CYGNUS_MYSQL_ATTR_PERSISTENCE=row"
    restart: unless-stopped
    networks:
      - fiware

  # PostgreSQL - Base de datos para históricos
  postgres-db:
    image: postgres:${POSTGRES_VERSION}
    container_name: fiware-postgres
    hostname: postgres-db
    environment:
      - "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}"
      - "POSTGRES_USER=${POSTGRES_USER}"
      - "POSTGRES_DB=${POSTGRES_DB}"
    volumes:
      - type: bind
        source: ${POSTGRES_DATA_PATH}
        target: /var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - fiware

  postgis:
    image: postgis/postgis
    hostname: postgis
    container_name: postgis
    environment:
      # If you need to create multiple database you can add coma separated databases eg gis,data
      - POSTGRES_DB=orion
      - POSTGRES_USER=docker
      - POSTGRES_PASS=docker
      - ALLOW_IP_RANGE=0.0.0.0/0
      # Add extensions you need to be enabled by default in the DB. Default are the five specified below
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
      - RUN_AS_ROOT=true
    ports:
      - "5432:5432"
    restart: on-failure
    volumes:
      - postgis-data:/var/lib/postgresql
      - dbbackups:/backups
    healthcheck:
      test: "PGPASSWORD=docker pg_isready -h 127.0.0.1 -U docker -d gis"


  # MySQL - Base de datos alternativa para históricos
  mysql:
    image: mysql:${MYSQL_VERSION}
    container_name: fiware-mysql
    hostname: mysql
    restart: unless-stopped
    environment:
      - "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"
      - "MYSQL_DATABASE=${MYSQL_DATABASE}"
      - "MYSQL_USER=${MYSQL_USER}"
      - "MYSQL_PASSWORD=${MYSQL_PASSWORD}"
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - type: bind
        source: ${MYSQL_DATA_PATH}
        target: /var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fiware

  # STH-Comet - Componente para series temporales históricas
  sth-comet:
    image: telefonicaiot/fiware-sth-comet:latest
    container_name: fiware-sth-comet
    hostname: sth
    depends_on:
      - mongo
    ports:
      - "${STH_PORT}:8666"
    environment:
      - "STH_HOST=0.0.0.0"
      - "STH_PORT=${STH_PORT}"
      - "DB_PREFIX=${STH_DB_PREFIX}"
      - "DB_URI=mongo:27017"
      - "LOGOPS_LEVEL=${STH_LOG_LEVEL}"
    restart: unless-stopped
    networks:
      - fiware

  # ----------------------------------------
  # AGENTES IOT
  # ----------------------------------------
  
  # IoT Agent para JSON
  iot-agent-json:
    image: fiware/iotagent-json:${IOTA_VERSION}
    container_name: fiware-iot-agent-json
    hostname: iot-agent-json
    depends_on:
      - mongo
    environment:
      # Configuración de Context Broker
      - "IOTA_CB_HOST=orion"
      - "IOTA_CB_PORT=1026"
      - "IOTA_CB_NGSI_VERSION=v2"

      # Configuración de puertos y endpoints
      - "IOTA_NORTH_PORT=${IOTA_NORTH_PORT}"
      - "IOTA_HTTP_PORT=${IOTA_SOUTH_PORT}"
      - "IOTA_PROVIDER_URL=http://iot-agent-json:${IOTA_NORTH_PORT}"
      - "IOTA_DEFAULT_RESOURCE=/iot/json"

      # Configuración de MongoDB
      - "IOTA_REGISTRY_TYPE=mongodb"
      - "IOTA_MONGO_HOST=mongo"
      - "IOTA_MONGO_PORT=27017"
      - "IOTA_MONGO_DB=${IOTA_MONGO_DB}"

      # Configuración general
      - "IOTA_LOG_LEVEL=${IOTA_LOG_LEVEL}"
      - "IOTA_TIMESTAMP=true"
      - "IOTA_AUTOCAST=true"
    ports:
      - "${IOTA_NORTH_PORT}:4041"
      - "${IOTA_SOUTH_PORT}:7896"
    restart: unless-stopped
    networks:
      - fiware

  # IoT Agent para Ultralight
  iot-agent-ul:
    image: fiware/iotagent-ul:${IOTA_VERSION}
    container_name: fiware-iot-agent-ul
    hostname: iot-agent-ul
    depends_on:
      - mongo
    ports:
      - "${IOTA_UL_NORTH_PORT}:4061"
      - "${IOTA_UL_SOUTH_PORT}:7897"
    environment:
      # Configuración de Context Broker
      - "IOTA_CB_HOST=orion"
      - "IOTA_CB_PORT=1026"
      - "IOTA_CB_NGSI_VERSION=v2"

      # Configuración de puertos y endpoints
      - "IOTA_NORTH_PORT=${IOTA_UL_NORTH_PORT}"
      - "IOTA_HTTP_PORT=${IOTA_UL_SOUTH_PORT}"
      - "IOTA_PROVIDER_URL=http://iot-agent-ul:${IOTA_UL_NORTH_PORT}"
      - "IOTA_DEFAULT_RESOURCE=/iot/ul"

      # Configuración de MongoDB
      - "IOTA_REGISTRY_TYPE=mongodb"
      - "IOTA_MONGO_HOST=mongo"
      - "IOTA_MONGO_PORT=27017"
      - "IOTA_MONGO_DB=${IOTA_MONGO_DB}"

      # Configuración general
      - "IOTA_LOG_LEVEL=${IOTA_LOG_LEVEL}"
      - "IOTA_TIMESTAMP=true"
      - "IOTA_AUTOCAST=true"
    restart: unless-stopped
    networks:
      - fiware

# ============================================================================
# VOLÚMENES PERSISTENTES
# ============================================================================

volumes:
  # Volumen para configuración de MongoDB
  mongo_config:
    name: fiware_mongo_config

# ============================================================================
# REDES
# ============================================================================

networks:
  fiware:
    driver: bridge
    name: fiware_network
